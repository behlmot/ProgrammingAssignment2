library(ggplot2)
search()
library(slidify)
library(slidify)
install.packages("slidify")
library(devtools)
install("devtools")
install.packages("devtools")
install_github('ramnathv/slidify')
library(devtools)
install("rtools")
swirl()
library(swirl)
swirl()
swirl()
add2 <- function(x,y) {
x+y
}
add2(3,7)
above10 <- function(x) {
use <- x>10
x[use]
}
above<-function(x,n) {
use<-x>n
x[use]
}
x<-1:20
above(x,10)
above<-function(x,n=10) {
use<-x>n
x[use]
}
above(x)
above(x,5)
columnmean<-function(y) {
nc<-ncol(y)
means<-numeric(nc)
for(i in 1:nc) {
means[i]<-mean(y[,i])
}
means
}
colummean(airquality)
columnmean(airquality)
columnmean<-function(y,removeNA=TRUE) {
nc<-ncol(y)
means<-numeric(nc)
for(i in 1:nc) {
means[i]<-mean(y[,i],na.rm=removeNA)
}
means
}
columnmean(airquality)
columnmean(airquality,FALSE)
setwd("~/R")
setwd("~/R")
library(datasets)
data(iris)
?iris
iris
mean(iris$Sepal.Length)
colMeans(iris)
apply(iris[, 1:4], 2, mean)
apply(iris, 2, mean)
apply(iris[, 1:4], 1, mean)
library(datasets)
data(mtcars)
mtcars
library(datasets)
data(mtcars)sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
x<-sapply(split(mtcars$mpg, mtcars$cyl), mean)
x[1]-x[3]
debug(ls)
ls(x)
iris
sapply(split(iris@species), mean)
sapply(split(iris@Species), mean)
end
e
library(datasets)
data(iris)
sapply(split(iris@species), mean)
sapply(split(iris@Species), mean)
sapply(split(iris$Species), mean)
sapply(split(iris$Species,iris$Sepal.Length), mean)
split(iris,iris$Sepal.Length)
split(iris,iris$Species)
s<-split(iris,iris$Species)
s
sapply(s,function(x) colMeans(x[,c("Species")]))
sapply(s,function(x) colMeans(x[,c("Species",Sepal.Lenght)]))
sapply(s,function(x) colMeans(x[,c("Sepal.Lenght")]))
sapply(s,function(x) colMeans(x[,c("Sepal.Lenght","Sepal.Width"")]))
Ã‡)
)
""
sapply(s,function(x) colMeans(x[,c("Sepal.Lenght","Sepal.Width")]))
s
lapply(s,function(x) colMeans(x[,c("Sepal.Lenght","Sepal.Width")]))
View(iris)
View(iris)
mean(mtcars$mpg, mtcars$cyl)
split(mtcars, mtcars$cyl)
lapply(mtcars, mean)
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(hp, cyl, mean))
x<-with(mtcars, tapply(hp, cyl, mean))
mtcars$hp
x(1)-x(2)
x[1]-x[3]
setwd("C:/Users/Josue/ProgammingAssignment")
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
L <- x$comp()
F <- x$getSolve()
if((L == TRUE) & (!is.null(F))){         #If the matrix didn't change and the getSolve is "not NULL"
M <- x$getSolve()                    #then will return the cache Matrix, otherwise it will compute
message("Getting the Inverse Matrix")#the new inverse.
return(M)
}
data <- x$get()
M <- solve(data, ...)
x$setSolve(M)
M
}
makeCacheMatrix <- function(dat = matrix()) {
M <- NULL
datOld <- dat
set <- function(y){ # This function sets the value of the "new matrix" to be computed
datOld <<- dat
dat <<- y
M <<- NULL
}
comp <- function() identical(dat, datOld) #Compare both matrices
get <- function() datOld <<- dat
setSolve <- function(solve) M <<- solve
getSolve <- function()M
list( set = set, comp = comp,
get = get, setSolve = setSolve,
getSolve = getSolve)
}
makeCacheMatrix()
cacheSolve
makeCacheMatrix(1)
